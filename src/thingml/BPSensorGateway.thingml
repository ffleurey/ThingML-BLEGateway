import "lib/Datatypes.thingml"
import "lib/ExitHandler.thingml"
import "lib/ble/HCISocketImpl.thingml"
import "lib/ble/BLE_initialiser.thingml"
import "lib/ble/BLE_scanner.thingml"
import "lib/ble/BLE_connecter.thingml"


thing Main includes BLEInitialiser, BLEScanner, BLEConnecter, ExitHandlerMsgs, ATT
@c_header "
  #include <time.h>
  #include <math.h>
  #include <bluetooth/bluetooth.h>
"


@c_global "
  float sfloat_to_float(uint8_t *bytes) {
    if (bytes[1] == 0x07 && bytes[0] == 0xFE) return INFINITY;
    else if (bytes[1] == 0x07 && bytes[0] == 0xFF) return NAN;
    else if (bytes[1] == 0x08 && bytes[0] == 0x00) return NAN;
    else if (bytes[1] == 0x08 && bytes[0] == 0x01) return NAN;
    else if (bytes[1] == 0x08 && bytes[0] == 0x02) return -INFINITY;
    else {
      int8_t exponent = ((int8_t)bytes[1]) >> 4;
      int16_t mantissa = ((int16_t)(((uint16_t)bytes[1]) << 12) >> 4) | ((uint16_t)bytes[0]);
      float f_exp = (float)exponent;
      float f_man = (float)mantissa;
      return pow(10,f_exp)*f_man;
    }
  }
"

{
	
	message bpsensor_connected()
	message bpsensor_error()
	message bpsensor_disconnected()
	message bpsensor_batterylevel(percent : Int)
	message bpsensor_measurement(PressureSystolic : Int, PressureDiastolic : Int, PressureMean : Int, PulseRate : Int, IrregularPulse : Boolean)
	message bpsensor_gw_ready()
	message bpsensor_gw_exit()
	
	provided port tryggi3d {
		sends bpsensor_connected, bpsensor_disconnected, bpsensor_error, bpsensor_measurement, bpsensor_gw_ready, bpsensor_gw_exit, bpsensor_batterylevel
	}

  property BPAddress : String // MUST BE SET IN THE CONFIGURATION
  property BPAddressBT : BTAddress
  
  property ConnectedHandle : UInt
  
  property BatteryValueHandle : UInt = '0x002B'
  property BloodPressureValueHandle : UInt = '0x0012'
  property BloodPressureConfigurationHandle : UInt = '0x0013'
	
  required port Signals
  {
    receives Interrupt
    sends Quit
  }
  
  function initialize_bt_addr() do
  	'str2ba('&BPAddress&', &'&BPAddressBT&');'
  end

  statechart States init Initialise
  {
  	
  	on entry do
  		initialize_bt_addr()
  	end
    
    state Initialise
    {
      on entry Initialiser!Start()

      transition -> Standby event Initialiser?DeviceInitialised

      transition -> Failed event Initialiser?Failure
      transition -> Quit event Signals?Interrupt
    }

    composite state Standby init Scan
    {
      
      state Scan
      {
        on entry do
          Scanner!Start()
          tryggi3d!bpsensor_gw_ready()
        end
        
       transition -> Connect event e : Scanner?ConnectableAdvertisement
       		guard (e.AddressType == BLEAddressType:PUBLIC and 'bacmp(&'&e.Address&', &'&BPAddressBT&')' == 0) 
       	 	action do
       	 		Scanner!Stop()
       	 		'printf("Blood Pressure Sensor wants to connect (%2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X)\n", '&e.Address&'.b[5],'&e.Address&'.b[4],'&e.Address&'.b[3],'&e.Address&'.b[2],'&e.Address&'.b[1],'&e.Address&'.b[0]);'
       	 	end
      }
      
      state Connect
      {
        on entry do
        	print "Connecting to Blood Presure Sensor...\n"
			Connecter!ConnectToU(BLEAddressType:PUBLIC, BPAddressBT)
        end
        
        transition -> Connected event e:Connecter?Connected action do
        	ConnectedHandle = e.Handle
        	tryggi3d!bpsensor_connected()
        	print "Blood Pressure Sensor Connected\n"
        end
        
  	  }
  	  
  	  state Connected {
  	  		on entry do
  	  			print "Connected to Blood Pressure Sensor.\n"
  	  		end
  	  		
  	  		transition -> Disconnected event Connecter?Stopped
  	  		transition -> Encrypted event Connecter?Encrypted
  	  }
  	  
  	  state Encrypted {
  	  	
  	  		on entry do
  	  			print "Encrypted Connection to Blood Pressure Sensor.\n"
  	  		end
  	  		
  	  		transition -> Sync
  	  }
  	  
  	  composite state Sync init ReadBattery
    {
      on entry do
        print "[INFO]: Syncing with A&D UA-651BLE...\n"
      end
      
      state ReadBattery
      {
        on entry do
          print "[INFO]: Reading battery percentage...\n"
          ATT!ATTReadRequest(ConnectedHandle, BatteryValueHandle)
        end

        transition -> TimeSync event e:ATT?ATTReadResponse guard (e.ConnectionHandle == ConnectedHandle) action do
          var Percent : Byte = ''&e.AttributeValue&'.bytes[0]'
          'printf("[INFO]: Got battery percentage - %u%%\n", '&Percent&');'
          tryggi3d!bpsensor_batterylevel(Percent as Int)
          //Weightscale!BatteryPercentage(Percent)
        end

        internal event e:ATT?ATTReadError guard (e.ConnectionHandle == ConnectedHandle) action do
          print "[ERROR]: Could not read battery percentage!\n"
          Connecter!Stop()
        end
      }
      
      state TimeSync
      {
        on entry do
          print "[INFO]: Synchronizing the time...\n"
          var AttributeValue : GATTData
          // Read the UTC time
          '
            time_t utc = time(NULL);
            struct tm *ptm = gmtime(&utc);
          '
          // Write into ATT value
          '
            '&AttributeValue&'.length = 7;
            *((uint16_t*)&'&AttributeValue&'.bytes[0]) = ptm->tm_year+1900;
            *((uint8_t*)&'&AttributeValue&'.bytes[2]) = ptm->tm_mon+1;
            *((uint8_t*)&'&AttributeValue&'.bytes[3]) = ptm->tm_mday;
            *((uint8_t*)&'&AttributeValue&'.bytes[4]) = ptm->tm_hour;
            *((uint8_t*)&'&AttributeValue&'.bytes[5]) = ptm->tm_min;
            *((uint8_t*)&'&AttributeValue&'.bytes[6]) = ptm->tm_sec;
          '
          ATT!ATTWriteRequest(ConnectedHandle, '0x0017', AttributeValue)
        end

        transition -> GetValues event e:ATT?ATTWriteResponse action do
          print "[INFO]: Time synchronization successfull!\n"
        end

        internal event e:ATT?ATTWriteError action do
          print "[ERROR]: Time synchronization failed. Error code: "
          'printf("%2.2X", '&e.Error&');'
          print "!!\n"
          Connecter!Stop()
        end
      }
      
      state GetValues
      {        
        on entry do
          print "[INFO]: Requesting indications of Blood Pressure Measurement...\n"
          var AttributeValue : GATTData
          ''&AttributeValue&'.length = 2;'
          ''&AttributeValue&'.bytes[0] = 0x02;'
          ''&AttributeValue&'.bytes[1] = 0x00;'
          ATT!ATTWriteRequest(ConnectedHandle, BloodPressureConfigurationHandle, AttributeValue)
        end
        
        internal event e:ATT?ATTWriteError guard (e.ConnectionHandle == ConnectedHandle) action do
          print "[ERROR]: Could not set indications of Blood Pressure Measurement!\n"
          Connecter!Stop()
        end
        
        internal event e:ATT?ATTHandleValueIndication guard (e.ConnectionHandle == ConnectedHandle and e.AttributeHandle == BloodPressureValueHandle) action do
          '
            uint8_t length = '&e.AttributeValue&'.length;
            uint8_t *data  = '&e.AttributeValue&'.bytes;
            uint8_t index = 7;
          '
          /* Decode the data */
          var UnitsKPA : Boolean = 'data[0] & 0x01'
          var HasTimestamp : Boolean = '(data[0] & 0x02) >> 1'
          var HasPulseRate : Boolean = '(data[0] & 0x04) >> 2'
          var HasUserID : Boolean = '(data[0] & 0x08) >> 3'
          var HasMeasurementStatus : Boolean = '(data[0] & 0x10) >> 4'

          /* Blood pressure measurement */
          var Systolic : Float = 'sfloat_to_float(&data[1])'
          var Diastolic : Float = 'sfloat_to_float(&data[3])'
          var MeanArterial : Float = 'sfloat_to_float(&data[5])'

          /* Timestamp */
          var Year : UInt = 0
          var Month : Byte = 0
          var Day : Byte = 0
          var Hour : Byte = 0
          var Minute : Byte = 0
          var Second : Byte = 0
          if (HasTimestamp) do
            Year = '*(uint16_t*)&data[index+0]'
            Month = 'data[index+2]'
            Day = 'data[index+3]'
            Hour = 'data[index+4]'
            Minute = 'data[index+5]'
            Second = 'data[index+6]'
            'index = index+7;'
          end

          /* Pulse rate */
          var Pulse : Float = 0
          if (HasPulseRate) do
            Pulse = 'sfloat_to_float(&data[index])'
            'index = index+2;'
          end

          /* User ID */
          var UserID : Byte = 0
          if (HasUserID) do
            UserID = 'data[index]'
            'index = index+1;'
          end

          /* Measurement Status */
          var BodyMovement : Boolean = false
          var CuffFit : Boolean = false
          var IrregularPulse : Boolean = false
          var PulseRate : Byte = 0
          var MeasurementPosition : Boolean = false
          if (HasMeasurementStatus) do
            BodyMovement = 'data[index] & 0x01'
            CuffFit = '(data[index] & 0x02) >> 1'
            IrregularPulse = '(data[index] & 0x04) >> 2'
            PulseRate = '(data[index] & 0x18) >> 3'
            MeasurementPosition = '(data[index] & 0x20) >> 5'
          end

          // Print the measurement
          print "[INFO]: Got Blood Pressure measurement - "
          'printf("%.0f/%.0f (%.0f) ",'&Systolic&', '&Diastolic&', '&MeanArterial&');'
          if (UnitsKPA) print "kPa "
          else print "mmHg "
          if (HasPulseRate) do
            'printf("%.0fBPM ",'&Pulse&');'
          end
          if (HasTimestamp) do
            'printf("%u.%u.%u %u:%u:%u ",'&Day&', '&Month&', '&Year&', '&Hour&', '&Minute&', '&Second&');'
          end
          if (HasMeasurementStatus) do
            print "- "
            if (IrregularPulse) print "Irregular pulse detected "
            else print "Normal pulse detected "
          end

          print "\n"

          ATT!ATTHandleValueConfirmation(e.ConnectionHandle)

          /* Send to Tellu */
          if (HasTimestamp and '!isnan('&Systolic&')') do
            // Convert to DateTime
            var ObservationTime : DateTime = 0
            '
              struct tm timebuf;
              timebuf.tm_year = '&Year&'-1900;
              timebuf.tm_mon = '&Month&'-1;
              timebuf.tm_mday = '&Day&';
              timebuf.tm_hour = '&Hour&';
              timebuf.tm_min = '&Minute&';
              timebuf.tm_sec = '&Second&';
            '
            ObservationTime = 'timegm(&timebuf)'
            // Convert to Ints
            var HealthPressureDiastolic : Int = Diastolic
            var HealthPressureMean : Int = MeanArterial
            var HealthPressureSystolic : Int = Systolic
            var HealthPulseRate : Int = Pulse
            //Send
           
           	tryggi3d!bpsensor_measurement(HealthPressureSystolic, HealthPressureDiastolic, HealthPressureMean, HealthPulseRate, IrregularPulse)
           
            //Tellu!TelluCloudBloodPressure(ObservationTime, HealthPressureDiastolic, HealthPressureMean, HealthPressureSystolic, HealthPulseRate)

          end
        end
      }
      
      transition -> Disconnected event Connecter?Stopped
      
    }
  	  
  	  
  	  state Disconnected {
  	  		on entry do
  	  			tryggi3d!bpsensor_disconnected()
  	  			print "Disconnected from Blood Pressure Sensor.\n"
  	  		end
  	  		
  	  		transition -> Scan
  	  }
      
      transition -> Deinitialise event Signals?Interrupt
      transition -> Failed event Initialiser?Failure
      transition -> Failed event Scanner?Failure
      transition -> Failed event Connecter?Failure
    }
    
    /* ---------------------------------------------------- */

    // Close everything
    state Deinitialise
    {
      on entry do
        print "[INFO]: Stopping...\n"
        Scanner!Stop()
      end
      
      internal event Scanner?Stopped action Initialiser!Stop()
      transition -> Quit event Initialiser?Stopped

      transition -> Failed event Scanner?Failure
      transition -> Failed event Initialiser?Failure
      transition -> Failed event Signals?Interrupt
    }

    // Failed somewhere
    state Failed
    {
      on entry do
      	tryggi3d!bpsensor_error()
      	tryggi3d!bpsensor_gw_exit()
        print "[ERROR]: Failed, quitting... !!!\n"
        Signals!Quit(1)
      end
    }

    // Normal QUIT
    state Quit // TODO How do we want to quit?
    {
      on entry do
        print "[INFO]: Finished, quitting...\n"
        tryggi3d!bpsensor_gw_exit()
        Signals!Quit(0)
      end
    }
  }
}

protocol MQTT 	@serializer "JSON"
  				@mqtt_broker_address 	"tryggi3d" 
  				@mqtt_publish_topic 	"tryggi3d/speech"
  				@mqtt_subscribe_topic 	"tryggi3d/speech"
  				@trace_level "1";

configuration BPSensorGateway
@add_c_libraries "bluetooth"
{
  instance handler : ExitHandler
  instance hci     : HCISocketProxyImpl

  instance main                   : Main
  instance initialiser            : BLEInitialiserImpl
  instance scanner                : BLEScannerImpl
  instance connecter              : BLEConnecterImpl
  
  set main.BPAddress = "5C:31:3E:5F:4A:5C"

  connector main.Signals => handler.Signals
  connector main.Initialiser => initialiser.Initialiser
  connector main.Scanner => scanner.Scanner
  connector main.Connecter => connecter.Connecter
  connector main.ATT => hci.ATT
  
  connector main.tryggi3d over MQTT
  
  /* Utilities */
  connector initialiser.Socket => hci.Socket
  connector initialiser.HCICommands => hci.Commands
  connector initialiser.HCIEvents => hci.Events
  connector initialiser.ATT => hci.ATT
  connector initialiser.SMP => hci.SMP
  
  connector scanner.Socket => hci.Socket
  connector scanner.HCICommands => hci.Commands
  connector scanner.HCIEvents => hci.Events
  connector scanner.ATT => hci.ATT
  connector scanner.SMP => hci.SMP
  
  connector connecter.Socket => hci.Socket
  connector connecter.HCICommands => hci.Commands
  connector connecter.HCIEvents => hci.Events
  connector connecter.ATT => hci.ATT
  connector connecter.SMP => hci.SMP
  
  set hci.Device = "hci0"
}
