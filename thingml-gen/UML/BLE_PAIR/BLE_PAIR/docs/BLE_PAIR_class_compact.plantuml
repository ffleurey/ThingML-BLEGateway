@startuml
caption Things used in configuration BLE_PAIR
class BLEInitialiserImpl <<(T,#F94918)PSM>> {
..Properties..
-DeviceAddress : BTAddress
..Port Initialiser..
>>Start
>>Stop
<<Started
<<Stopped
<<Failure
<<DeviceInitialised
}
class ModuleMsgs <<(F,#BC74ED)Fragment>> {
..Messages..
-Start()
-Stop()
-Started()
-Stopped()
-Failure()
}
class BLEInitialiserMsgs <<(F,#BC74ED)Fragment>> {
..Messages..
-DeviceInitialised(...)
}
class HCISocket <<(F,#BC74ED)Fragment>> {
..Port Socket..
>>Opened
>>Closed
<<Open
<<Close
..Port HCICommands..
<<Reset
<<SetEventMask
<<SetEventMaskAll
<<SetLocalName
<<Disconnect
<<SetLEEventMask
<<SetLEEventMaskAll
<<SetLEAdvertisementParameters
<<SetLEAdvertiseEnable
<<SetLEAdvertisingData
<<SetLEScanResponseData
<<SetLEScanParameters
<<SetLEScanEnable
<<LECreateConnection
<<LECreateConnectionCancel
<<LERand
<<LEEncrypt
<<LEStartEncryption
..Port HCIEvents..
>>ResetCompleted
>>SetEventMaskCompleted
>>SetLocalNameCompleted
>>DisconnectStatus
>>DisconnectionCompleted
>>SetLEEventMaskCompleted
>>SetLEAdvertisementParametersCompleted
>>SetLEAdvertiseEnableCompleted
>>SetLEAdvertisingDataCompleted
>>SetLEScanResponseDataCompleted
>>SetLEScanParametersCompleted
>>SetLEScanEnableCompleted
>>LEAdvertisementReport
>>LECreateConnectionStatus
>>LECreateConnectionCancelCompleted
>>LEConnectionComplete
>>LEEnhancedConnectionComplete
>>LERandCompleted
>>LEEncryptCompleted
>>EncryptionChanged
>>LEStartEncryptionStatus
}
class HCISocketMsgs <<(F,#BC74ED)Fragment>> {
..Messages..
-Open()
-Close()
-Opened(...)
-Closed()
}
class HCIControllerMsgs <<(F,#BC74ED)Fragment>> {
..Messages..
-Reset()
-ResetCompleted(...)
-SetEventMask(...)
-SetEventMaskAll()
-SetEventMaskCompleted(...)
-SetLocalName(...)
-SetLocalNameCompleted(...)
-Disconnect(...)
-DisconnectStatus(...)
-DisconnectionCompleted(...)
-EncryptionChanged(...)
-SetLEEventMask(...)
-SetLEEventMaskAll()
-SetLEEventMaskCompleted(...)
-SetLEAdvertisementParameters(...)
-SetLEAdvertisementParametersCompleted(...)
-SetLEAdvertiseEnable(...)
-SetLEAdvertiseEnableCompleted(...)
-SetLEAdvertisingData(...)
-SetLEAdvertisingDataCompleted(...)
-SetLEScanResponseData(...)
-SetLEScanResponseDataCompleted(...)
-LEAdvertisementReport(...)
-SetLEScanParameters(...)
-SetLEScanParametersCompleted(...)
-SetLEScanEnable(...)
-SetLEScanEnableCompleted(...)
-LECreateConnection(...)
-LECreateConnectionStatus(...)
-LECreateConnectionCancel()
-LECreateConnectionCancelCompleted(...)
-LEConnectionComplete(...)
-LEEnhancedConnectionComplete(...)
-LERand()
-LERandCompleted(...)
-LEEncrypt(...)
-LEEncryptCompleted(...)
-LEStartEncryption(...)
-LEStartEncryptionStatus(...)
}
class SMP <<(F,#BC74ED)Fragment>> {
..Port SMP..
>>SMPPairingRequest
>>SMPPairingResponse
>>SMPPairingConfirm
>>SMPPairingRandom
>>SMPPairingFailed
>>SMPPairingPublicKey
>>SMPPairingDHKeyCheck
>>SMPKeypressNotification
>>SMPEncryptionInformation
>>SMPMasterIdentification
>>SMPIdentityInformation
>>SMPIdentityAddressInformation
>>SMPSigningInformation
>>SMPSecurityRequest
<<SMPPairingRequest
<<SMPPairingResponse
<<SMPPairingConfirm
<<SMPPairingRandom
<<SMPPairingFailed
<<SMPPairingPublicKey
<<SMPPairingDHKeyCheck
<<SMPKeypressNotification
<<SMPEncryptionInformation
<<SMPMasterIdentification
<<SMPIdentityInformation
<<SMPIdentityAddressInformation
<<SMPSigningInformation
<<SMPSecurityRequest
}
class SMPMsgs <<(F,#BC74ED)Fragment>> {
..Messages..
-SMPPairingRequest(...)
-SMPPairingResponse(...)
-SMPPairingConfirm(...)
-SMPPairingRandom(...)
-SMPPairingFailed(...)
-SMPPairingPublicKey(...)
-SMPPairingDHKeyCheck(...)
-SMPKeypressNotification(...)
-SMPEncryptionInformation(...)
-SMPMasterIdentification(...)
-SMPIdentityInformation(...)
-SMPIdentityAddressInformation(...)
-SMPSigningInformation(...)
-SMPSecurityRequest(...)
}
class ATT <<(F,#BC74ED)Fragment>> {
..Port ATT..
>>ATTFindInformationRequest
>>ATTFindInformationResponse
>>ATTFindInformationError
>>ATTReadByTypeRequest
>>ATTReadByTypeResponse
>>ATTReadByTypeError
>>ATTReadRequest
>>ATTReadResponse
>>ATTReadError
>>ATTReadByGroupTypeRequest
>>ATTReadByGroupTypeResponse
>>ATTReadByGroupTypeError
>>ATTWriteRequest
>>ATTWriteResponse
>>ATTWriteError
>>ATTWriteCommand
>>ATTHandleValueNotification
>>ATTHandleValueIndication
>>ATTHandleValueConfirmation
<<ATTFindInformationRequest
<<ATTFindInformationResponse
<<ATTFindInformationError
<<ATTReadByTypeRequest
<<ATTReadByTypeResponse
<<ATTReadByTypeError
<<ATTReadRequest
<<ATTReadResponse
<<ATTReadError
<<ATTReadByGroupTypeRequest
<<ATTReadByGroupTypeResponse
<<ATTReadByGroupTypeError
<<ATTWriteRequest
<<ATTWriteResponse
<<ATTWriteError
<<ATTWriteCommand
<<ATTHandleValueNotification
<<ATTHandleValueIndication
<<ATTHandleValueConfirmation
}
class ATTMsgs <<(F,#BC74ED)Fragment>> {
..Messages..
-ATTFindInformationRequest(...)
-ATTFindInformationResponse(...)
-ATTFindInformationError(...)
-ATTReadByTypeRequest(...)
-ATTReadByTypeResponse(...)
-ATTReadByTypeError(...)
-ATTReadRequest(...)
-ATTReadResponse(...)
-ATTReadError(...)
-ATTReadByGroupTypeRequest(...)
-ATTReadByGroupTypeResponse(...)
-ATTReadByGroupTypeError(...)
-ATTWriteRequest(...)
-ATTWriteResponse(...)
-ATTWriteError(...)
-ATTWriteCommand(...)
-ATTHandleValueNotification(...)
-ATTHandleValueIndication(...)
-ATTHandleValueConfirmation(...)
}
class UUIDFunctions <<(F,#BC74ED)Fragment>> {
..Functions..
-ReadUUID(...) : UUID
-MakeUUID(...) : UUID
-PrintUUID(...) : void
}
class BLEEncryptionImpl <<(T,#F94918)PSM>> {
..Properties..
-GeneratedRandomNumber : BLERandomNumber
-Rand : BLERandomNumber
-IAT : BLEAddressType
-IA : BTAddress
-RAT : BLEAddressType
-RA : BTAddress
-Srand : BLERandomNumber
-Mrand : BLERandomNumber
..Port Encrypter..
>>Start
>>GenerateRandomNumber
>>GenerateConfirm
>>CheckConfirm
>>GenerateSTK
<<Started
<<Failure
<<GenerateRandomNumberCompleted
<<GenerateConfirmCompleted
<<CheckConfirmCompleted
<<GenerateSTKCompleted
..Functions..
-GenerateP1() : BLERandomNumber
-GenerateP2() : BLERandomNumber
}
class BLEEncryptionMsgs <<(F,#BC74ED)Fragment>> {
..Messages..
-GenerateRandomNumber()
-GenerateRandomNumberCompleted(...)
-GenerateConfirm(...)
-GenerateConfirmCompleted(...)
-CheckConfirm(...)
-CheckConfirmCompleted(...)
-GenerateSTK(...)
-GenerateSTKCompleted(...)
}
class Main <<(T,#F94918)PSM>> {
..Properties..
-ConnectedAddressType : BLEAddressType
-ConnectedAddress : BTAddress
-ConnectedHandle : UInt
-DeviceAddressType : BLEAddressType = BLEAddressType:PUBLIC
-DeviceAddress : BTAddress
-Mrand : BLERandomNumber
-Srand : BLERandomNumber
-Mconfirm : BLERandomNumber
-Sconfirm : BLERandomNumber
-PeerLTK : BLERandomNumber
-PeerEDIV : UInt
-PeerRandom : BLERandomPart
-PeerIRK : BLERandomNumber
-PeerIdentityAddressType : BLEAddressType
-PeerIdentityAddress : BTAddress
-OwnLTK : BLERandomNumber
-OwnEDIV : UInt
-OwnRandom : BLERandomPart
-OwnIRK : BLERandomNumber
-OwnIdentityAddressType : BLEAddressType
-OwnIdentityAddress : BTAddress
-HavePeerLTK : Boolean = false
-HavePeerIdentification : Boolean = false
-HavePeerIdentity : Boolean = false
-HavePeerIdentityAddress : Boolean = false
-HasPairedSuccessfully : Boolean = false
..Port Signals..
>>Interrupt
<<Quit
..Functions..
-printBytes() : void
}
class BLEInitialiser <<(F,#BC74ED)Fragment>> {
..Port Initialiser..
>>Started
>>Stopped
>>Failure
>>DeviceInitialised
<<Start
<<Stop
}
class BLEConnecter <<(F,#BC74ED)Fragment>> {
..Port Connecter..
>>Connected
>>Stopped
>>Failure
>>Encrypted
<<Connect
<<ConnectTo
<<ConnectToU
<<Stop
<<Encrypt
}
class BLEConnecterMsgs <<(F,#BC74ED)Fragment>> {
..Messages..
-Connect()
-ConnectTo(...)
-ConnectToU(...)
-Connected(...)
-Encrypt()
-Encrypted()
}
class ExitHandlerMsgs <<(F,#BC74ED)Fragment>> {
..Messages..
-Interrupt()
-Quit(...)
}
class BLEEncryption <<(F,#BC74ED)Fragment>> {
..Port Encrypter..
>>Started
>>Failure
>>GenerateRandomNumberCompleted
>>GenerateConfirmCompleted
>>CheckConfirmCompleted
>>GenerateSTKCompleted
<<Start
<<GenerateRandomNumber
<<GenerateConfirm
<<CheckConfirm
<<GenerateSTK
}
class ExitHandler <<(T,#F94918)PSM>> {
..Port Signals..
>>Quit
<<Interrupt
..Functions..
-catch_sigint() : void
}
note left of ExitHandler : <b>@c_header</b> <color:royalBlue>"#include <stdlib.h>"</color>\n<b>@c_header</b> <color:royalBlue>"#include <signal.h>"</color>\n<b>@c_global</b> <color:royalBlue>"struct ExitHandler_Instance *_handler_instance;"</color>\n
class HCISocketProxyImpl <<(T,#F94918)PSM>> {
..Properties..
-DevHandle : Int =  -1
..Functions..
-OpenSocket() : void
-CloseSocket() : void
-SocketIsOpen() : Byte
-GetBTAddress() : BTAddress
-SendCommand(...) : void
-SendACLData(...) : void
-StartSocketReader() : void
}
note left of HCISocketProxyImpl : <b>@c_header</b> <color:royalBlue>"#include <errno.h>"</color>\n<b>@c_header</b> <color:royalBlue>"#include <stdio.h>"</color>\n<b>@c_header</b> <color:royalBlue>"#include <sys/ioctl.h>"</color>\n<b>@c_header</b> <color:royalBlue>"#include <bluetooth/bluetooth.h>"</color>\n<b>@c_header</b> <color:royalBlue>"#include <bluetooth/hci.h>"</color>\n<b>@c_header</b> <color:royalBlue>"#include <bluetooth/hci_lib.h>"</color>\n
class HCISocketProxy <<(F,#BC74ED)Fragment>> {
..Properties..
-Device : String
..Port Socket..
>>Open
>>Close
<<Opened
<<Closed
..Port Commands..
>>Reset
>>SetEventMask
>>SetEventMaskAll
>>SetLocalName
>>Disconnect
>>SetLEEventMask
>>SetLEEventMaskAll
>>SetLEAdvertisementParameters
>>SetLEAdvertiseEnable
>>SetLEAdvertisingData
>>SetLEScanResponseData
>>SetLEScanParameters
>>SetLEScanEnable
>>LECreateConnection
>>LECreateConnectionCancel
>>LERand
>>LEEncrypt
>>LEStartEncryption
..Port Events..
<<ResetCompleted
<<SetEventMaskCompleted
<<SetLocalNameCompleted
<<DisconnectStatus
<<DisconnectionCompleted
<<SetLEEventMaskCompleted
<<SetLEAdvertisementParametersCompleted
<<SetLEAdvertiseEnableCompleted
<<SetLEAdvertisingDataCompleted
<<SetLEScanResponseDataCompleted
<<SetLEScanParametersCompleted
<<SetLEScanEnableCompleted
<<LEAdvertisementReport
<<LECreateConnectionStatus
<<LECreateConnectionCancelCompleted
<<LEConnectionComplete
<<LEEnhancedConnectionComplete
<<LERandCompleted
<<LEEncryptCompleted
<<EncryptionChanged
<<LEStartEncryptionStatus
..Functions..
-OpenSocket() : void
-CloseSocket() : void
-SocketIsOpen() : Byte
-GetBTAddress() : BTAddress
-SendCommand(...) : void
-SendACLData(...) : void
-DecodeEvent(...) : void
-OnCommandCompletedEvent(...) : void
-OnCommandStatusEvent(...) : void
-OnLEMetaEvent(...) : void
-printBuffer(...) : void
-HandleACLData(...) : void
-OnL2CAPData(...) : void
-OnSMPData(...) : void
-OnATTData(...) : void
}
class SMPProxy <<(F,#BC74ED)Fragment>> {
..Port SMP..
>>SMPPairingRequest
>>SMPPairingResponse
>>SMPPairingConfirm
>>SMPPairingRandom
>>SMPPairingFailed
>>SMPPairingPublicKey
>>SMPPairingDHKeyCheck
>>SMPKeypressNotification
>>SMPEncryptionInformation
>>SMPMasterIdentification
>>SMPIdentityInformation
>>SMPIdentityAddressInformation
>>SMPSigningInformation
>>SMPSecurityRequest
<<SMPPairingRequest
<<SMPPairingResponse
<<SMPPairingConfirm
<<SMPPairingRandom
<<SMPPairingFailed
<<SMPPairingPublicKey
<<SMPPairingDHKeyCheck
<<SMPKeypressNotification
<<SMPEncryptionInformation
<<SMPMasterIdentification
<<SMPIdentityInformation
<<SMPIdentityAddressInformation
<<SMPSigningInformation
<<SMPSecurityRequest
}
class ATTProxy <<(F,#BC74ED)Fragment>> {
..Port ATT..
>>ATTFindInformationRequest
>>ATTFindInformationResponse
>>ATTFindInformationError
>>ATTReadByTypeRequest
>>ATTReadByTypeResponse
>>ATTReadByTypeError
>>ATTReadRequest
>>ATTReadResponse
>>ATTReadError
>>ATTReadByGroupTypeRequest
>>ATTReadByGroupTypeResponse
>>ATTReadByGroupTypeError
>>ATTWriteRequest
>>ATTWriteResponse
>>ATTWriteError
>>ATTWriteCommand
>>ATTHandleValueNotification
>>ATTHandleValueIndication
>>ATTHandleValueConfirmation
<<ATTFindInformationRequest
<<ATTFindInformationResponse
<<ATTFindInformationError
<<ATTReadByTypeRequest
<<ATTReadByTypeResponse
<<ATTReadByTypeError
<<ATTReadRequest
<<ATTReadResponse
<<ATTReadError
<<ATTReadByGroupTypeRequest
<<ATTReadByGroupTypeResponse
<<ATTReadByGroupTypeError
<<ATTWriteRequest
<<ATTWriteResponse
<<ATTWriteError
<<ATTWriteCommand
<<ATTHandleValueNotification
<<ATTHandleValueIndication
<<ATTHandleValueConfirmation
}
class BLEConnecterImpl <<(T,#F94918)PSM>> {
..Properties..
-ConnectAddress : String
-ConnectAddressBT : BTAddress
-ConnectAddressType : BLEAddressType
-LongTermKey : BLERandomNumber
-EncryptedDiversifier : UInt
-RandomNumber : BLERandomPart
-ConnectedHandle : Int
-ConnectedAddressType : BLEAddressType
-ConnectedAddress : BTAddress
..Port Connecter..
>>Connect
>>ConnectTo
>>ConnectToU
>>Stop
>>Encrypt
<<Connected
<<Stopped
<<Failure
<<Encrypted
}
ModuleMsgs <|-- BLEInitialiserImpl
BLEInitialiserMsgs <|-- BLEInitialiserImpl
HCISocket <|-- BLEInitialiserImpl
HCISocketMsgs <|-- HCISocket
HCIControllerMsgs <|-- HCISocket
SMP <|-- HCISocket
SMPMsgs <|-- SMP
ATT <|-- HCISocket
ATTMsgs <|-- ATT
UUIDFunctions <|-- ATT
ModuleMsgs <|-- BLEEncryptionImpl
BLEEncryptionMsgs <|-- BLEEncryptionImpl
HCISocket <|-- BLEEncryptionImpl
BLEInitialiser <|-- Main
ModuleMsgs <|-- BLEInitialiser
BLEInitialiserMsgs <|-- BLEInitialiser
BLEConnecter <|-- Main
ModuleMsgs <|-- BLEConnecter
BLEConnecterMsgs <|-- BLEConnecter
ExitHandlerMsgs <|-- Main
BLEEncryption <|-- Main
ModuleMsgs <|-- BLEEncryption
BLEEncryptionMsgs <|-- BLEEncryption
HCISocket <|-- Main
ExitHandlerMsgs <|-- ExitHandler
HCISocketProxy <|-- HCISocketProxyImpl
HCISocketMsgs <|-- HCISocketProxy
HCIControllerMsgs <|-- HCISocketProxy
SMPProxy <|-- HCISocketProxy
SMPMsgs <|-- SMPProxy
ATTProxy <|-- HCISocketProxy
ATTMsgs <|-- ATTProxy
UUIDFunctions <|-- ATTProxy
ModuleMsgs <|-- BLEConnecterImpl
BLEConnecterMsgs <|-- BLEConnecterImpl
HCISocket <|-- BLEConnecterImpl
@enduml